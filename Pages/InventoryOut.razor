@page "/inventory-out"
@using InventoryManagementBlazorServer.Interfaces
@using InventoryManagementBlazorServer.DTOs
@using InventoryManagementBlazorServer.Services
@using System.Text.Json
@inject IInventoryService _inventoryService
@inject INotificationService _notificationService
@inject NavigationManager Navigation
@inject TokenStorageService _tokenStorageService

<h3>📦 Registrar Salida de Inventario</h3>

<div class="mb-3">
    <label>Sucursal destino:</label>
    <select @bind="selectedBranchId" class="form-control">
        <option value="">Seleccione una sucursal</option>
        @foreach (var branch in branches)
        {
            <option value="@branch.Id">@branch.Name</option>
        }
    </select>
</div>

<div class="mb-3">
    <label>Producto:</label>
    <select @bind="selectedProductId" class="form-control">
        <option value="">Seleccione un producto</option>
        @foreach (var product in products)
        {
            <option value="@product.Id">@product.Name</option>
        }
    </select>
</div>

<div class="mb-3">
    <label>Cantidad:</label>
    <input @bind="quantity" type="number" class="form-control" min="1" />
</div>

<button class="btn btn-primary" @onclick="AddProduct">➕ Agregar</button>

<table class="table mt-4">
    <thead>
        <tr>
            <th>ID Producto</th>
            <th>Nombre</th>
            <th>Nombre Lote</th> 
            <th>Cantidad</th>
            <th>Costo</th>
            <th>Fecha de Vencimiento</th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in inventoryOut.Details)
        {
            <tr>
                <td>@item.ProductId</td>
                <td>@item.ProductName</td>
                <td>Lote @item.BatchId</td>
                <td>@item.Quantity</td>
                <td>@(item.Cost * item.Quantity)</td>
                <td>@item.ExpirationDate.ToString("yyyy-MM-dd")</td>
                <td><button class="btn btn-danger" @onclick="() => RemoveProduct(item)">🗑️ Eliminar</button></td>
            </tr>
        }
    </tbody>
</table>
<p><strong>Total Costo: </strong> @TotalCost.ToString("C")</p>

<button class="btn btn-success" @onclick="SubmitInventoryOut">🚛 Registrar Salida</button>

@code {
    private List<BranchDto> branches = new();
    private List<ProductDto> products = new();
    private InventoryOutDto inventoryOut = new();
    private int selectedBranchId;
    private int selectedProductId;
    private int quantity;

    private decimal TotalCost => inventoryOut.Details.Sum(d => d.Cost * d.Quantity);

    protected override async Task OnInitializedAsync()
    {
        branches = await _inventoryService.GetBranchesAsync();
        products = await _inventoryService.GetProductsAsync();
    }

    private async Task AddProduct()
    {
        if (selectedProductId == 0 || quantity <= 0)
        {
            _notificationService.NotifyError("Debes seleccionar un producto y una cantidad válida.");
            return;
        }

        var response = await _inventoryService.GetProductDetailsAsync(selectedProductId);
        if (response != null && response.IsSuccess && response.Body != null)
        {
            var productDetails = response.Body;

            var selectedLot = productDetails.Lots
                .OrderBy(l => l.ExpirationDate)
                .FirstOrDefault();

            if (selectedLot == null || selectedLot.BatchQuantity < quantity)
            {
                _notificationService.NotifyError("No hay suficiente stock disponible para este producto.");
                return;
            }

            var existingProduct = inventoryOut.Details.FirstOrDefault(p => p.ProductId == selectedProductId);
            if (existingProduct != null)
            {
                _notificationService.NotifyWarning("Este producto ya está en la lista.");
                return;
            }

            inventoryOut.Details.Add(new InventoryOutDetailDto
            {
                ProductId = productDetails.IdProduct,
                ProductName = productDetails.ProductName,
                BatchId = selectedLot.BatchId,
                Quantity = quantity,
                Cost = selectedLot.Cost,
                ExpirationDate = selectedLot.ExpirationDate
            });

            _notificationService.NotifyInfo($"Se agregaron lotes del producto {response.Body.ProductName}.");
        }
        else
        {
            _notificationService.NotifyError("No se pudo obtener información del producto.");
        }
    }

    private void RemoveProduct(InventoryOutDetailDto detail)
    {
        inventoryOut.Details.Remove(detail);
    }

    private async Task SubmitInventoryOut()
    {
        inventoryOut.IdBranch = selectedBranchId;
        inventoryOut.TotalCost = inventoryOut.Details.Sum(d => d.Cost * d.Quantity);

        var userId = await _tokenStorageService.GetUserIdFromTokenAsync();

        if (userId == null)
        {
            _notificationService.NotifyError("No se pudo obtener el usuario autenticado.");
            return;
        }
        var jsonPayload = JsonSerializer.Serialize(inventoryOut, new JsonSerializerOptions { WriteIndented = true });

        inventoryOut.IdUser = userId.Value;

        if (userId.Value != 1)
        {
            _notificationService.NotifyError("No tienes permisos para realizar esta acción.");
            return;
        }

        var response = await _inventoryService.RegisterInventoryOutAsync(inventoryOut);
        if (response.IsSuccess)
        {
            _notificationService.NotifySuccess(response.Message);
        }
    }
}